name: C++ CI

on:
  push:
    branches: [main] # NOTE: replace/update with appropriate branch name(s)
    tags: ['*']
  pull_request:
    branches: [main] # NOTE: replace/update with appropriate branch name(s)
  workflow_dispatch:
    inputs:
      build_type:
        description: Build type
        required: false
        default: 'Debug'
        type: choice
        options:
          - Debug
          - Release
          - RelWithDebInfo
          - MinSizeRel

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    permissions:
      contents: write

    defaults:
      run:
        # Use a bash shell, so we can use the same syntax for environment variable
        # access regardless of the host operating system
        # https://github.com/saxbophone/CPP20-Cross-Platform-Template
        shell: bash

    env:
      CC: ${{ matrix.c }}
      CXX: ${{ matrix.cxx }}
      BUILD_TYPE: ${{ inputs.build_type || 'Debug' }}
      CPPCHECK_VER: "2.9"

      # NOTE: update executable name if it is changed in CMakeLists.txt
      EXECUTABLE_NAME: "HolocronUI"
      INPUT_FILENAME: "tastatura.txt"
      BUILD_DIR: "build"
      EXT_DIR: "ext"

      # NOTE: replace with another version if this one does not work
      # For more versions, see https://winlibs.com or
      # https://github.com/brechtsanders/winlibs_mingw/releases/
      MINGW_CACHE_KEY: "gcc-11.3-msvcrt-r3"
      MINGW_VER: "11.3.0-14.0.3-10.0.0-msvcrt-r3/winlibs-x86_64-posix-seh-gcc-11.3.0-mingw-w64msvcrt-10.0.0-r3.7z"
      # Example:
      # MINGW_CACHE_KEY: "gcc-12.2-msvcrt-r2"
      # MINGW_VER:  "12.2.0-14.0.6-10.0.0-msvcrt-r2/winlibs-x86_64-posix-seh-gcc-12.2.0-mingw-w64msvcrt-10.0.0-r2.7z"

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-12
            c: clang
            cxx: clang++
            name: macOS 12 Apple Clang 13
            # cmake_flags:

#          - os: macos-12
#            c: gcc-11
#            cxx: g++-11
#            name: macOS 12 GCC 11
#            # cmake_flags:

    steps:
#      - name: Checkout repo
#        uses: actions/checkout@v3
#
#      - name: Prepare env
#        run: |
#          echo ${GITHUB_WORKSPACE}
#          mkdir ${GITHUB_WORKSPACE}/artifacts

      # Common Linux dependencies
      # - name: Install Linux Dependencies
      #   if: runner.os == 'Linux'
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install ...

      - name: Test macOS
        if: runner.os == 'macOS'
        run: |
          brew install sdl2
          brew --prefix sdl2

      # temp workaround, there is a bug in xcode linker 14.0.1; as of now, 14.1 is in beta
#      - name: Setup Xcode version
#        if: runner.os == 'macOS' && startsWith(matrix.cxx, 'g++')
#        uses: maxim-lobanov/setup-xcode@v1
#        with:
#          xcode-version: '13.4.1'

      # Uncomment when using external dependencies so they will be cached
      # - name: Cache deps
      #   uses: actions/cache@v3
      #   id: cache-deps
      #   # make the key depend on the dependency version
      #   with:
      #     path: |
      #       "${BUILD_DIR}"/_deps
      #     key: cache-${{ matrix.cmake_generator }}-${{ matrix.os }}-${{ matrix.cxx }}-${{ env.BUILD_TYPE }}

      # NOTE: GH Actions does not allow updating the cache yet
      # Using the workaround found here: https://github.com/actions/cache/issues/171
      # Since this cache is small, it should not fill the cache too much
#      - name: Cache Ninja deps
#        uses: actions/cache@v3
#        if: matrix.cmake_generator == 'Ninja'
#        id: cache-deps-ninja
#        with:
#          path: |
#            "${BUILD_DIR}"/.ninja_deps
#            "${BUILD_DIR}"/.ninja_log
#          key: ${{ matrix.os }}-${{ matrix.cxx }}-ninja-cache-${{ hashFiles('CMakeLists.txt') }}
#          restore-keys: ${{ matrix.os }}-${{ matrix.cxx }}-ninja-cache-

      # - name: Cache ninja exe
      #   uses: actions/cache@v3
      #   id: cache-ninja-exe
      #   if: runner.os == 'Windows' && matrix.cxx == 'cl'
      #   with:
      #     path: ninja
      #     key: ${{ runner.os }}-ninja-1.11.0

      # - name: Download ninja
      #   uses: suisei-cn/actions-download-file@v1
      #   id: download-ninja
      #   if: matrix.cxx == 'cl' && steps.cache-ninja-exe.outputs.cache-hit != 'true'
      #   with:
      #     url: "https://github.com/ninja-build/ninja/releases/download/v1.11.0/ninja-win.zip"
      #     target: ninja-exe

      # - name: Extract ninja exe
      #   if: runner.os == 'Windows' && matrix.cxx == 'cl' && steps.cache-ninja-exe.outputs.cache-hit != 'true'
      #   run: |
      #     7z x ninja-exe/${{ steps.download-ninja.outputs.filename }} -oninja

#      - name: Build
#        # Execute the build using N jobs (-jN)
#        run: cmake --build "${BUILD_DIR}" --config ${BUILD_TYPE} -j6
#
#      - name: Install
#        # Use CMake to "install" build artifacts (only interested in CMake registered targets) to our custom artifacts directory
#        run: cmake --install "${BUILD_DIR}" --config ${BUILD_TYPE} --prefix artifacts
#
#      - name: Move artifacts
#        run: |
#          mv artifacts/bin bin
#
#      - name: Set current date and prefix name
#        run: |
#          echo "TIMESTAMP=$(date +%Y-%m-%d-%H-%M-%S)" >> ${GITHUB_ENV}
#
#          # use the full name as prefix: {user_name}_{repo_name} (replace / with _)
#          echo "ZIP_PREFIX=$(echo ${GITHUB_REPOSITORY} | sed 's|/|_|')" >> ${GITHUB_ENV}
#
#          # or use only the repo name (github does not have a predefined environment variable for this)
#          # the regex splits by / and keeps everything after / without the / character
#          # echo "ZIP_PREFIX=$(echo ${GITHUB_REPOSITORY} | sed -E 's|.+/(.+)|\1|')" >> ${GITHUB_ENV}
#
#      - name: Upload Artifacts
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{ env.ZIP_PREFIX }}_${{ env.BUILD_TYPE }}_${{ matrix.os }}_${{ matrix.cxx }}_${{ env.TIMESTAMP }}
#          path: bin
#          retention-days: 10

      # - name: Sanitizers
      #   # run one sanitizer for each env to avoid building extra binaries on one env;
      #   # memory on Linux clang, address on macOS clang
      #   if: startsWith(matrix.cxx, 'clang++')
      #   # detect_leaks is not supported on macOS
      #   # env:
      #   # ASAN_OPTIONS: detect_leaks=1
      #   run: |
      #     cat "${INPUT_FILENAME}" | ./bin/"${EXECUTABLE_NAME}"

      # Application Verifier does not work with sanitizers, need separate executable
      #- name: Application Verifier (Windows MSVC)
      #  if: matrix.cxx == 'cl'
      #  continue-on-error: true
      #  run: cat "${INPUT_FILENAME}" | appverif //verify ./bin/"${EXECUTABLE_NAME}".exe

      # - name: Valgrind
      #   if: runner.os == 'Linux' && matrix.cxx == 'g++-11'
      #   run: |
      #     # remove --show-leak-kinds=all (and --track-origins=yes) if there are many leaks in external libs
      #     cat "${INPUT_FILENAME}" | valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 ./bin/"${EXECUTABLE_NAME}"

#      - name: Set Tag Name
#        if: startsWith(github.ref, 'refs/tags/')
#        # trim prefix from ref to get tag name
#        run: echo "TAG_NAME=${GITHUB_REF#'refs/tags/'}" >> ${GITHUB_ENV}
#
#      - name: Archive Release
#        uses: thedoctor0/zip-release@master
#        # if: startsWith(github.ref, 'refs/tags/')
#        with:
#          type: 'zip'
#          path: bin
#          filename: ${{ env.ZIP_PREFIX }}_${{ env.BUILD_TYPE }}_${{ env.TAG_NAME }}_${{ matrix.os }}_${{ matrix.cxx }}.zip
#
#      - name: Release
#        uses: softprops/action-gh-release@v1
#        if: startsWith(github.ref, 'refs/tags/')
#        with:
#          files: |
#            ${{ env.ZIP_PREFIX }}_${{ env.BUILD_TYPE }}_${{ env.TAG_NAME }}_${{ matrix.os }}_${{ matrix.cxx }}.zip
